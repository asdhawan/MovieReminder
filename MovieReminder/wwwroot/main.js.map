{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/models/movie.ts","webpack:///./src/app/moviedetails/moviedetails.component.css","webpack:///./src/app/moviedetails/moviedetails.component.html","webpack:///./src/app/moviedetails/moviedetails.component.ts","webpack:///./src/app/movies/movies.component.css","webpack:///./src/app/movies/movies.component.html","webpack:///./src/app/movies/movies.component.ts","webpack:///./src/app/moviesearch/moviesearch.component.css","webpack:///./src/app/moviesearch/moviesearch.component.html","webpack:///./src/app/moviesearch/moviesearch.component.ts","webpack:///./src/app/services/movie.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;;ACZyC;AACc;AACK;AACkB;AACH;AAE3E,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE;IACtD,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,wEAAe,EAAE;IAC9C,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,0FAAqB,EAAE;IACxD,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,uFAAoB,EAAE;CACpD;AAMD,IAAa,gBAAgB,GAA7B;CAEC;AAFY,gBAAgB;IAJ5B,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,gBAAgB,CAE5B;AAF4B;;;;;;;;;;;;ACjB7B,mB;;;;;;;;;;;ACAA,iNAAiN,SAAS,wzB;;;;;;;;;;;;;;;;;;;;;;;;ACAhL;AAO1C,IAAa,YAAY,GAAzB;IAGE;QAFA,UAAK,GAAG,iBAAiB,CAAC;IAG1B,CAAC;CACF;AALY,YAAY;IALxB,+DAAS,CAAC;QACT,QAAQ,EAAE,UAAU;;;KAGrB,CAAC;;GACW,YAAY,CAKxB;AALwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACI;AAEE;AACa;AACkB;AACH;AAEnB;AAGxD,iCAAiC;AAiBjC,IAAa,SAAS,GAAtB;CAA0B;AAAb,SAAS;IAfrB,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,uEAAa;YACb,oEAAgB;YAChB,0DAAW;SACZ;QACD,YAAY,EAAE;YACZ,2DAAY;YACZ,wEAAe;YACf,0FAAqB;YACrB,uFAAoB;SACrB;QACD,SAAS,EAAE,EAAE;QACb,SAAS,EAAE,CAAC,2DAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;AC7BhB;IAUJ;QACE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;IAAA,CAAC;CACH;;;;;;;;;;;;ACbD,uB;;;;;;;;;;;ACAA,mNAAmN,0BAA0B,uDAAuD,sBAAsB,gFAAgF,kBAAkB,iCAAiC,UAAU,yC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA9Y;AACT;AAER;AACiB;AAQzD,IAAa,qBAAqB;AADlC,4BAA4B;AAC5B;IAGE,wBAAwB;IACxB,YACU,KAAqB,EACrB,YAA0B;QAD1B,UAAK,GAAL,KAAK,CAAgB;QACrB,iBAAY,GAAZ,YAAY,CAAc;IAChC,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAEO,eAAe;QACrB,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAY,EAAE,EAAE;YACzD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlBU;IAAR,2DAAK,EAAE;8BAAQ,mDAAK;oDAAC;AADX,qBAAqB;IANjC,+DAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;;;KAG7B,CAAC;IACF,4BAA4B;;qCAMT,8DAAc;QACP,oEAAY;GANzB,qBAAqB,CAmBjC;AAnBiC;;;;;;;;;;;;ACZlC,wCAAwC,KAAK,K;;;;;;;;;;;ACA7C,yQAAyQ,MAAM,qDAAqD,gBAAgB,WAAW,UAAU,+FAA+F,sBAAsB,kG;;;;;;;;;;;;;;;;;;;;;;;;;ACA5a;AAEO;AAQzD,IAAa,eAAe;AAD5B,sBAAsB;AACtB;IAIE,kBAAkB;IAClB,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAC9C,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,QAAQ,CAAC,KAAY;QACnB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,MAAe,EAAE,EAAE;YAC/D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AArBY,eAAe;IAN3B,+DAAS,CAAC;QACT,QAAQ,EAAE,YAAY;;;KAGvB,CAAC;IACF,sBAAsB;;qCAMc,oEAAY;GALnC,eAAe,CAqB3B;AArB2B;;;;;;;;;;;;ACV5B,qCAAqC,UAAU,qBAAqB,sBAAsB,KAAK,oBAAoB,oDAAoD,iDAAiD,kBAAkB,yBAAyB,6BAA6B,KAAK,K;;;;;;;;;;;ACArS,09BAA09B,MAAM,wFAAwF,kBAAkB,qDAAqD,iBAAiB,sJAAsJ,QAAQ,iHAAiH,8BAA8B,uK;;;;;;;;;;;;;;;;;;;;;;;;;;ACA34C;AACV;AACgB;AASxD,IAAa,oBAAoB;AADjC,2BAA2B;AAC3B;IAIE,uBAAuB;IACvB,YAAoB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;QACxC,IAAI,CAAC,SAAS,GAAG,IAAI,mDAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACzB,CAAC;IAED,QAAQ,KAAK,CAAC;IAEd,YAAY;QACV,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aACtC,IAAI,CAAC,CAAC,OAAgB,EAAE,EAAE;YACzB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;YAC7B,6BAA6B;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAnBY,oBAAoB;IANhC,+DAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;;;KAG5B,CAAC;IACF,2BAA2B;;qCAMK,oEAAY;GAL/B,oBAAoB,CAmBhC;AAnBgC;;;;;;;;;;;;;;;;;;;;;;;;;ACXU;AAI3C,IAAa,YAAY,GAAzB;IAEE;QADA,WAAM,GAAW,kCAAkC,CAAC;IAEpD,CAAC;IAED,oBAAoB;QAClB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,+EAA+E,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACzH,CAAC;IAED,mBAAmB;QACjB,0HAA0H;QAC1H,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,WAAmB;QACxB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,kCAAkC,WAAW,EAAE,CAAC,CAAC;IAC5E,CAAC;IACD,8CAA8C;IAC9C,gCAAgC;IAChC,mBAAmB;IACnB,MAAM;IACN,4FAA4F;IAC5F,oDAAoD;IACpD,gCAAgC;IAChC,6CAA6C;IAC7C,SAAS;IACT,GAAG;IAEH,cAAc,CAAC,EAAU;QACvB,IAAI,OAAO,GAAgB;YACzB,MAAM,EAAE,KAAK;SACd,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,YAAY,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC;aACrF,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aAC7C,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,YAAY,CAAC,QAAgB;QACnC,IAAI,OAAO,GAAgB;YACzB,MAAM,EAAE,KAAK;SACd,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC;aAC5B,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aAC7C,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;YACtB,IAAI,MAAM,GAAY,IAAI,KAAK,EAAS,CAAC;YACzC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,IAAS;QAC9B,IAAI,QAAQ,GAAU;YACpB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,YAAY,EAAE,mCAAmC,IAAI,CAAC,aAAa,EAAE;YACrE,UAAU,EAAE,kCAAkC,IAAI,CAAC,WAAW,EAAE;YAChE,aAAa,EAAE,kCAAkC,IAAI,CAAC,WAAW,EAAE;SACpE,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;CAcF;AAhFY,YAAY;IADxB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;;GACtB,YAAY,CAgFxB;AAhFwB;;;;;;;;;;;;;;ACJzB;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MoviesComponent } from './movies/movies.component';\nimport { MovieDetailsComponent } from './moviedetails/moviedetails.component';\r\nimport { MovieSearchComponent } from './moviesearch/moviesearch.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/movies', pathMatch: 'full' },\r\n  { path: 'movies', component: MoviesComponent },\r\n  { path: 'movies/:id', component: MovieDetailsComponent },\r\n  { path: 'search', component: MovieSearchComponent }\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<header>\\r\\n  <nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\r\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">{{ title }}</a>\\r\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n    </button>\\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\r\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n        <li class=\\\"nav-item active\\\">\\r\\n          <a routerLink=\\\"/movies\\\" class=\\\"nav-link\\\">Dashboard</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a routerLink=\\\"/search\\\" class=\\\"nav-link\\\">Search</a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </nav>\\r\\n</header>\\r\\n\\r\\n<section class=\\\"container-fluid p-0\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</section>\\r\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'MovieMinder 1.0';\n\n  constructor() {\r\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MoviesComponent } from './movies/movies.component';\nimport { MovieDetailsComponent } from './moviedetails/moviedetails.component';\nimport { MovieSearchComponent } from './moviesearch/moviesearch.component';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport * as ngxbs from 'ngx-bootstrap';\n//import * as mdb from 'moviedb';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule    \n  ],\n  declarations: [\n    AppComponent,\n    MoviesComponent,\n    MovieDetailsComponent,\n    MovieSearchComponent\n  ],  \n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class movie {\n  id: number;\r\n  name: string;\r\n  synopsis: string;\r\n  seen: boolean;\r\n  release_date: Date;\r\n  backdrop_url: string;\r\n  poster_url: string;\r\n  thumbnail_url: string;\r\n\r\n  constructor() {\r\n    this.seen = false;\r\n  };\r\n}\r\n","module.exports = \"\\r\\n\"","module.exports = \"<div *ngIf=\\\"movie\\\" class=\\\"d-lg-flex justify-content-center\\\">\\r\\n  <div class=\\\"card col-lg-8 col-xl-6 bg-dark text-light rounded-0 rounded-bottom\\\">\\r\\n    <div class=\\\"card-header\\\"><h2>{{ movie.name | uppercase }}</h2></div>\\r\\n    <img class=\\\"card-img-top\\\" src=\\\"{{ movie.backdrop_url }}\\\" alt=\\\"\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <p class=\\\"card-text\\\">{{ movie.synopsis }}</p>\\r\\n      <span>id: </span>{{movie.id}}\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router'\r\n\r\nimport { movie } from '../models/movie';\r\nimport { MovieService } from '../services/movie.service';\r\n\r\n@Component({\r\n  selector: 'app-movie-detail',\r\n  templateUrl: './moviedetails.component.html',\r\n  styleUrls: ['./moviedetails.component.css']\r\n})\r\n/** moviedetails component*/\r\nexport class MovieDetailsComponent implements OnInit {\r\n  @Input() movie: movie;\r\n\r\n  /** moviedetails ctor */\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private movieService: MovieService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getMovieDetails();\r\n  }\r\n\r\n  private getMovieDetails(): void {\r\n    var id = parseInt(this.route.snapshot.paramMap.get('id'));\r\n    this.movieService.getMovieDetail(id).then((movie: movie) => {\r\n      this.movie = movie;\r\n    });\r\n  }\r\n}\r\n","module.exports = \".dashboard-container {\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"dashboard-container\\\">\\r\\n  <div class=\\\"container text-center bg-white px-3 pt-3\\\">\\r\\n    <div class=\\\"card-columns\\\">\\r\\n      <div class=\\\"card border-info movies\\\" *ngFor=\\\"let m of movies\\\">\\r\\n        <a routerLink=\\\"/movies/{{m.id}}\\\">\\r\\n          <img class=\\\"card-img-top\\\" src=\\\"{{ m.poster_url }}\\\" alt=\\\"{{ m.name }}\\\">\\r\\n          <div class=\\\"card-body text-info\\\">\\r\\n            <h4 class=\\\"text-muted\\\">{{ m.name | titlecase }}</h4>\\r\\n          </div>\\r\\n        </a>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { movie } from '../models/movie';\r\nimport { MovieService } from '../services/movie.service';\r\n\r\n@Component({\r\n  selector: 'app-movies',\r\n  templateUrl: './movies.component.html',\r\n  styleUrls: ['./movies.component.css']\r\n})\r\n/** movies component*/\r\nexport class MoviesComponent implements OnInit {\r\n  movies: movie[];\r\n  selectedMovie: movie;\r\n\r\n  /** movies ctor */\r\n  constructor(private movieService: MovieService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadMovies();\r\n  }\r\n\r\n  onselect(movie: movie): void {\r\n    this.selectedMovie = movie;\r\n  }\r\n\r\n  loadMovies(): void {\r\n    this.movieService.getMoviesNowPlaying().then((movies: movie[]) => {\r\n      this.movies = movies;\r\n    });\r\n  }\r\n}\r\n","module.exports = \".search-container {\\r\\n \\r\\n}\\r\\n.search-content {\\r\\n  margin: 5% auto;\\r\\n}\\r\\n.card-img-left {\\r\\n  border-bottom-left-radius: calc(.25rem - 1px);\\r\\n  border-top-left-radius: calc(.25rem - 1px);\\r\\n  float: left;\\r\\n  padding-right: 1em;\\r\\n  margin-bottom: -1.25em;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"d-lg-flex justify-content-center\\\">\\r\\n  <div class=\\\"col-lg-8 col-xl-6 bg-dark p-3 mx-lg-5 mt-lg-5 border border-dark rounded\\\">\\r\\n    <div class=\\\"bg-white p-3 border border-light\\\">\\r\\n      <h1>Search</h1>\\r\\n      <div class=\\\"card bg-light p-2\\\">\\r\\n        <div class=\\\"card-header p-2\\\">\\r\\n          <!--<form (submit)=\\\"handleSearch()\\\">-->\\r\\n            <div class=\\\"input-group\\\">\\r\\n              <input [(ngModel)]=\\\"searchObj.name\\\" name=\\\"movieName\\\" type=\\\"text\\\" class=\\\"form-control p-2\\\" placeholder=\\\"Movie Name\\\" />\\r\\n              <div class=\\\"input-group-append\\\">\\r\\n                <button class=\\\"btn btn-outline-info\\\" type=\\\"button\\\" (click)=\\\"handleSearch()\\\">Search</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          <!--</form>-->\\r\\n        </div>\\r\\n        <div class=\\\"card-body bg-light p-2\\\">\\r\\n          <div class=\\\"card-group justify-content-center\\\">\\r\\n            <a routerLink=\\\"/movies/{{m.id}}\\\" *ngFor=\\\"let m of searchResults\\\" class=\\\"card text-white\\\" style=\\\"min-width: 150px; max-width: 150px;\\\">\\r\\n              <img class=\\\"card-img\\\" src=\\\"{{m.thumbnail_url}}\\\" alt=\\\"\\\" />\\r\\n              <div class=\\\"card-img-overlay p-2\\\">\\r\\n                <div class=\\\"card-title bg-secondary p-1 mb-0 rounded-top\\\">{{m.name}}</div>\\r\\n                <div class=\\\"card-text bg-light text-dark px-1 rounded-bottom\\\"><small>Release Year: {{m.release_date | date:'yyyy'}}</small></div>\\r\\n              </div>              \\r\\n            </a>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { movie } from '../models/movie';\r\nimport { MovieService } from '../services/movie.service'\r\nimport {  } from 'moviedb'\r\n\r\n@Component({\r\n  selector: 'app-moviesearch',\r\n  templateUrl: './moviesearch.component.html',\r\n  styleUrls: ['./moviesearch.component.css']\r\n})\r\n/** moviesearch component*/\r\nexport class MovieSearchComponent implements OnInit {\r\n  searchObj: movie;\r\n  searchResults: movie[];\r\n\r\n  /** moviesearch ctor */\r\n  constructor(private movieSvc: MovieService) {\r\n    this.searchObj = new movie();\r\n    this.searchObj.id = -1;\r\n  }\r\n\r\n  ngOnInit() { }\r\n\r\n  handleSearch(): void {\r\n    this.movieSvc.search(this.searchObj.name)\r\n      .then((results: movie[]) => {\r\n        this.searchResults = results;\r\n        //this.searchResults.push(m);\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { movie } from '../models/movie';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MovieService {\r\n  apiKey: string = '098f3b2e36992519c1814874200fc995';\r\n  constructor() {\r\n  }\r\n\r\n  getMoviesMostPopular(): Promise<movie[]> {\r\n    return this.getMovieList(`https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${this.apiKey}`);\r\n  }\r\n\r\n  getMoviesNowPlaying(): Promise<movie[]> {\r\n    //return this.getMovieList(`https://api.themoviedb.org/3/movie/now_playing?page=1&language=en-US&api_key=${this.apiKey}`);\r\n    return this.getMovieList('api/MovieDb');\r\n  }\r\n\r\n  search(partialName: string): Promise<movie[]> {\r\n    return this.getMovieList(`api/MovieDb/search?partialName=${partialName}`);\r\n  }\r\n  //getMovieDetail(id: number): Promise<movie> {\r\n  //  var options: RequestInit = {\r\n  //    method: 'GET'\r\n  //  };\r\n  //  return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}`, options)\r\n  //    .then((response: Response) => response.json())\r\n  //    .then((jsonData: any) => {\r\n  //      return this.newMovieObject(jsonData);\r\n  //    });\r\n  //}\r\n  \r\n  getMovieDetail(id: number): Promise<movie> {\r\n    var options: RequestInit = {\r\n      method: 'GET'\r\n    };\r\n    return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}`, options)\r\n      .then((response: Response) => response.json())\r\n      .then((jsonData: any) => {\r\n        return this.newMovieObject(jsonData);\r\n      });\r\n  }\r\n\r\n  private getMovieList(resource: string): Promise<movie[]> {\r\n    var options: RequestInit = {\r\n      method: 'GET'\r\n    };\r\n    return fetch(resource, options)\r\n      .then((response: Response) => response.json())\r\n      .then((jsonData: any) => {\r\n        var movies: movie[] = new Array<movie>();\r\n        jsonData.forEach(json => {\r\n          movies.push(this.newMovieObject(json));\r\n        });\r\n        return movies;\r\n      });\r\n  }\r\n\r\n  private newMovieObject(json: any): movie {\r\n    var movieObj: movie = {\r\n      id: json.id,\r\n      name: json.title,\r\n      release_date: json.release_date,\r\n      seen: false,\r\n      synopsis: json.overview,\r\n      backdrop_url: `https://image.tmdb.org/t/p/w1280${json.backdrop_path}`,\r\n      poster_url: `https://image.tmdb.org/t/p/w500${json.poster_path}`,\r\n      thumbnail_url: `https://image.tmdb.org/t/p/w300${json.poster_path}`\r\n    };\r\n    return movieObj;\r\n  }\r\n\r\n  //private newMovieObject(json: any): movie {\r\n  //  var movieObj: movie = {\r\n  //    id: json.Id,\r\n  //    name: json.Title,\r\n  //    release_date: json.ReleaseDate,\r\n  //    seen: false,\r\n  //    synopsis: json.Overview,\r\n  //    backdrop_url: `https://image.tmdb.org/t/p/w1280${json.BackdropPath}`,\r\n  //    poster_url: `https://image.tmdb.org/t/p/w500${json.PosterPath}`\r\n  //  };\r\n  //  return movieObj;\r\n  //}\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}